services:
  deliveryapi:
    volumes:
      - ./back/DeliveryApi/keys:/keys
    image: deliveryapi
    build:
      context: ./back/DeliveryApi
      dockerfile: Dockerfile
    ports:
      - "8080:8080"
    environment:
      - ASPNETCORE_URLS=http://+:8080
      - DOTNET_SYSTEM_GLOBALIZATION_INVARIANT=1
      - MongoDbSettings__ConnectionString=mongodb://mongo:27017/?retryWrites=true&loadBalanced=false&connectTimeoutMS=10000
      - MongoDbSettings__DatabaseName=DeliveryDb
      - JwtSettings__SecretKey=0a505fe7-78cd-4514-935b-2399bb26f858
      - JwtSettings__Issuer=DeliveryApi
      - JwtSettings__Audience=DeliveryApiClients
      - JwtSettings__ExpiryInMinutes=60
      - RabbitMqSettings__HostName=rabbitmq
      - RabbitMqSettings__Port=5672
      - RabbitMqSettings__UserName=guest
      - RabbitMqSettings__Password=guest
      - RabbitMqSettings__QueueName=orders_queue
    depends_on:
      - mongo
      - rabbitmq
    networks:
      - delivery-network

  delivery-front:
    image: node:18
    container_name: delivery-frontend
    working_dir: /app
    volumes:
      - ./front/delivery:/app
    ports:
      - "3000:3000"
    command: sh -c "npm install && npm run dev -- --host"
    environment:
      - VITE_API_URL=http://localhost:8080
    depends_on:
      - deliveryapi
    networks:
      - delivery-network

  rabbitmq-mongo-consumer:
    image: node:18
    container_name: rabbitmq-mongo-consumer
    working_dir: /app
    volumes:
      - ./back/rabbitmq-mongo-consumer:/app
    command: sh -c "npm install && node index.js"
    depends_on:
      - mongo
      - rabbitmq
    networks:
      - delivery-network
    environment:
      - MONGO_URI=mongodb://mongo:27017/DeliveryDb
      - RABBITMQ_URI=amqp://rabbitmq

  mongo:
    image: mongo:latest
    container_name: mongodb
    restart: always
    ports:
      - "27017:27017"
    volumes:
      - mongo-data:/data/db
    networks:
      - delivery-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:27017"]
      interval: 10s
      timeout: 5s
      retries: 5

  rabbitmq:
    image: rabbitmq:3-management
    container_name: rabbitmq
    restart: always
    ports:
      - "5672:5672"
      - "15672:15672"
    environment:
      - RABBITMQ_DEFAULT_USER=guest
      - RABBITMQ_DEFAULT_PASS=guest
    networks:
      - delivery-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:15672"]
      interval: 10s
      timeout: 5s
      retries: 5

volumes:
  mongo-data:

networks:
  delivery-network:
    driver: bridge